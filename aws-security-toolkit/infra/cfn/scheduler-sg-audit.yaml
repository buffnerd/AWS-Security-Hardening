AWSTemplateFormatVersion: '2010-09-09'
Description: 'EventBridge scheduler for Security Group audit'

Parameters:
  ScheduleExpression:
    Type: String
    Default: 'rate(1 day)'
    Description: 'EventBridge schedule expression'

Resources:
  SGAuditSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SGAuditLambdaFunction.Arn

  SGAuditLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aws-security-toolkit-sg-audit
      Runtime: python3.9
      Handler: aws_sec_toolkit.lambda_handlers.handler_sg_audit.lambda_handler
      Code:
        ZipFile: |
          # Placeholder - replace with actual deployment package
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Not implemented'}
      Timeout: 300

  SGAuditScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Scheduled Security Group audit'
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt SGAuditLambdaFunction.Arn
          Id: SGAuditTarget

  SGAuditLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SGAuditLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SGAuditScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'SG Audit Lambda Function ARN'
    Value: !GetAtt SGAuditLambdaFunction.Arn