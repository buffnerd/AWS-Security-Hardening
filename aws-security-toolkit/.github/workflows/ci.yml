name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with Ruff
      run: |
        ruff check src/ tests/ bin/ --output-format=github

    - name: Format check with Black
      run: |
        black --check --diff src/ tests/ bin/

    - name: Type check with mypy
      run: |
        mypy src/aws_sec_toolkit/ --ignore-missing-imports

    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov=src/aws_sec_toolkit --cov-report=xml --cov-report=term-missing --cov-fail-under=70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security scan tools
      run: |
        pip install bandit[toml] safety

    - name: Run Bandit Security Scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: |
        python -m build

    - name: Test Lambda build script
      run: |
        cd infra/lambda
        chmod +x build.sh
        bash build.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          infra/lambda/aws-security-toolkit-lambda.zip

  cli-test:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test CLI scripts (dry-run mode)
      run: |
        chmod +x bin/*.py
        python bin/cloudtrail_enable_multiregion.py --help
        python bin/enable_guardduty_all_regions.py --help
        python bin/enable_securityhub_all_regions.py --help
        python bin/s3_block_public_access_everywhere.py --help
        python bin/iam_enforce_mfa_report_and_disable_keys.py --help
        python bin/ec2_sg_audit_and_fix_open_ports.py --help

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # Check that all required documentation exists
        test -f README.md
        test -f docs/hardening-runbook.md
        test -f docs/least-priv-iam.md
        test -f docs/org-multi-account.md
        test -f docs/sg-remediation-notes.md
        test -f CONTRIBUTING.md
        echo "✅ All documentation files present"

    - name: Validate CloudFormation templates
      run: |
        # Install cfn-lint
        pip install cfn-lint
        
        # Validate all CloudFormation templates
        cfn-lint infra/cfn/*.yaml
        echo "✅ CloudFormation templates validated"